---
- name: configure crush hierarchy
  ceph_crush:
    cluster: "{{ cluster }}"
    location: "{{ hostvars[item]['osd_crush_location'] }}"
    containerized: "{{ docker_exec_cmd }}"
  with_items: "{{ groups[osd_group_name] }}"
  register: config_crush_hierarchy
  when:
    - inventory_hostname == groups.get(mon_group_name) | last
    - create_crush_tree
    - hostvars[item]['osd_crush_location'] is defined

- name: create crush ec profiles
  command: "{{ docker_exec_cmd }} ceph --cluster {{ cluster }} osd erasure-code-profile set {{ item.name }} plugin={{ item.plugin }} {{ item.ec_config | to_json | regex_replace('\\:\\ ','=') | regex_replace('[\\[\\]{}\\\"]') | regex_replace('\\,\\ ',' ') }}"
  with_items: "{{ ec_profiles | unique }}"
  changed_when: false
  when:
    - inventory_hostname == groups.get(mon_group_name) | last

- name: create configured crush ec rules
  command: "{{ docker_exec_cmd }} ceph --cluster {{ cluster }} osd crush rule create-erasure {{ item.name }} {{ item.ec_profile }}"
  with_items: "{{ crush_ec_rules | unique }}"
  changed_when: false
  when:
    - inventory_hostname == groups.get(mon_group_name) | last

- name: create configured crush replicated rules
  command: "{{ docker_exec_cmd }} ceph --cluster {{ cluster }} osd crush rule create-replicated {{ item.name }} {{ item.root }} {{ item.type }} {{ item.class }}"
  with_items: "{{ crush_rep_rules | unique }}"
  changed_when: false
  when:
    - inventory_hostname == groups.get(mon_group_name) | last

- name: create configured crush simple rules
  command: "{{ docker_exec_cmd }} ceph --cluster {{ cluster }} osd crush rule create-simple {{ item.name }} {{ item.root }} {{ item.type }}"
  with_items: "{{ crush_rules | unique }}"
  changed_when: false
  when:
    - inventory_hostname == groups.get(mon_group_name) | last

- name: get id for new default crush rule
  command: "{{ docker_exec_cmd }} ceph --cluster {{ cluster }} osd -f json crush rule dump {{ item.name }}"
  register: info_ceph_default_crush_rule
  changed_when: false
  loop: "{{ [crush_rules, crush_rep_rules, crush_ec_rules]|flatten(levels=1) }}"
  when:
    - inventory_hostname == groups.get(mon_group_name) | last
    - item.default

# If multiple rules are set as default (should not be) then the last one is taken as actual default.
# the with_items statement overrides each iteration with the new one.
# NOTE(leseb): we should actually fail if multiple rules are set as default
- name: set_fact info_ceph_default_crush_rule_yaml
  set_fact:
    info_ceph_default_crush_rule_yaml: "{{ item.stdout | from_json() }}"
  with_items: "{{ info_ceph_default_crush_rule.results }}"
  when:
    - inventory_hostname == groups.get(mon_group_name) | last
    - not item.get('skipped', false)

- name: set_fact osd_pool_default_crush_rule
  set_fact:
    osd_pool_default_crush_rule: "osd_pool_default_crush_rule"

- name: insert new default crush rule into daemon to prevent restart
  command: "{{ hostvars[item]['docker_exec_cmd'] | default('') }} ceph --cluster {{ cluster }} daemon mon.{{ hostvars[item]['monitor_name'] }} config set {{ osd_pool_default_crush_rule }} {{ info_ceph_default_crush_rule_yaml.rule_id }}"
  changed_when: false
  delegate_to: "{{ item }}"
  with_items: "{{ groups[mon_group_name] }}"
  when:
    - not config_crush_hierarchy.get('skipped', false)
    - info_ceph_default_crush_rule_yaml | default('') | length > 0

- name: "add new default crush rule to {{ cluster }}.conf"
  ini_file:
    dest: "/etc/ceph/{{ cluster }}.conf"
    section: "global"
    option: "{{ osd_pool_default_crush_rule }}"
    value: "{{ info_ceph_default_crush_rule_yaml.rule_id }}"
  delegate_to: "{{ item }}"
  with_items: "{{ groups[mon_group_name] }}"
  when:
    - not config_crush_hierarchy.get('skipped', false)
    - info_ceph_default_crush_rule_yaml | default('') | length > 0
